[0m=============================================================[0m
[0m-- ROS_VERSION is 2[0m
[0m=============================================================[0m
[0m=============================================================[0m
[0m-- ROS2 Found. ROS2 Support is turned On.[0m
[0m=============================================================[0m
[0mCMake Deprecation Warning at src/driver/HesaiLidar_SDK_2.0/libhesai/CMakeLists.txt:5 (cmake_minimum_required):
  Compatibility with CMake < 2.8.12 will be removed from a future version of
  CMake.

  Update the VERSION argument <min> value or use a ...<max> suffix to tell
  CMake that the project does not need compatibility with older versions.

[0m
[0m=============================================================[0m
[0m-- CUDA Found. CUDA Support is turned On.[0m
[0m=============================================================[0m
[0mCMake Deprecation Warning at /opt/ros/humble/share/rosidl_cmake/cmake/rosidl_target_interfaces.cmake:32 (message):
  Use rosidl_get_typesupport_target() and target_link_libraries() instead of
  rosidl_target_interfaces()
Call Stack (most recent call first):
  CMakeLists.txt:262 (rosidl_target_interfaces)

[0m
[01m[Kcc1:[m[K [01;35m[Kwarning: [m[Kcommand-line option â€˜[01m[K-std=c++17[m[Kâ€™ is valid for C++/ObjC++ but not for C
[01m[Kcc1:[m[K [01;35m[Kwarning: [m[Kcommand-line option â€˜[01m[K-std=c++17[m[Kâ€™ is valid for C++/ObjC++ but not for C
[01m[Kcc1:[m[K [01;35m[Kwarning: [m[Kcommand-line option â€˜[01m[K-std=c++17[m[Kâ€™ is valid for C++/ObjC++ but not for C
[01m[Kcc1:[m[K [01;35m[Kwarning: [m[Kcommand-line option â€˜[01m[K-std=c++17[m[Kâ€™ is valid for C++/ObjC++ but not for C
[01m[Kcc1:[m[K [01;35m[Kwarning: [m[Kcommand-line option â€˜[01m[K-std=c++17[m[Kâ€™ is valid for C++/ObjC++ but not for C
[01m[Kcc1:[m[K [01;35m[Kwarning: [m[Kcommand-line option â€˜[01m[K-std=c++17[m[Kâ€™ is valid for C++/ObjC++ but not for C
[01m[Kcc1:[m[K [01;35m[Kwarning: [m[Kcommand-line option â€˜[01m[K-std=c++17[m[Kâ€™ is valid for C++/ObjC++ but not for C
[01m[Kcc1:[m[K [01;35m[Kwarning: [m[Kcommand-line option â€˜[01m[K-std=c++17[m[Kâ€™ is valid for C++/ObjC++ but not for C
[01m[Kcc1:[m[K [01;35m[Kwarning: [m[Kcommand-line option â€˜[01m[K-std=c++17[m[Kâ€™ is valid for C++/ObjC++ but not for C
[01m[Kcc1:[m[K [01;35m[Kwarning: [m[Kcommand-line option â€˜[01m[K-std=c++17[m[Kâ€™ is valid for C++/ObjC++ but not for C
[01m[Kcc1:[m[K [01;35m[Kwarning: [m[Kcommand-line option â€˜[01m[K-std=c++17[m[Kâ€™ is valid for C++/ObjC++ but not for C
[01m[Kcc1:[m[K [01;35m[Kwarning: [m[Kcommand-line option â€˜[01m[K-std=c++17[m[Kâ€™ is valid for C++/ObjC++ but not for C
[01m[Kcc1:[m[K [01;35m[Kwarning: [m[Kcommand-line option â€˜[01m[K-std=c++17[m[Kâ€™ is valid for C++/ObjC++ but not for C
[01m[Kcc1:[m[K [01;35m[Kwarning: [m[Kcommand-line option â€˜[01m[K-std=c++17[m[Kâ€™ is valid for C++/ObjC++ but not for C
[01m[Kcc1:[m[K [01;35m[Kwarning: [m[Kcommand-line option â€˜[01m[K-std=c++17[m[Kâ€™ is valid for C++/ObjC++ but not for C
[01m[Kcc1:[m[K [01;35m[Kwarning: [m[Kcommand-line option â€˜[01m[K-std=c++17[m[Kâ€™ is valid for C++/ObjC++ but not for C
[01m[Kcc1:[m[K [01;35m[Kwarning: [m[Kcommand-line option â€˜[01m[K-std=c++17[m[Kâ€™ is valid for C++/ObjC++ but not for C
[01m[Kcc1:[m[K [01;35m[Kwarning: [m[Kcommand-line option â€˜[01m[K-std=c++17[m[Kâ€™ is valid for C++/ObjC++ but not for C
/opt/ros/humble/include/rclcpp/rclcpp/logger.hpp(106): warning #970-D: the qualifier on this friend declaration is ignored

/opt/ros/humble/include/rclcpp/rclcpp/logger.hpp(106): warning #970-D: the qualifier on this friend declaration is ignored

/opt/ros/humble/include/rclcpp/rclcpp/network_flow_endpoint.hpp(92): warning #970-D: the qualifier on this friend declaration is ignored

/opt/ros/humble/include/rclcpp/rclcpp/network_flow_endpoint.hpp(95): warning #970-D: the qualifier on this friend declaration is ignored

/opt/ros/humble/include/rclcpp/rclcpp/network_flow_endpoint.hpp(100): warning #970-D: the qualifier on this friend declaration is ignored

/opt/ros/humble/include/rclcpp/rclcpp/network_flow_endpoint.hpp(92): warning #970-D: the qualifier on this friend declaration is ignored

/opt/ros/humble/include/rclcpp/rclcpp/network_flow_endpoint.hpp(95): warning #970-D: the qualifier on this friend declaration is ignored

/opt/ros/humble/include/rclcpp/rclcpp/network_flow_endpoint.hpp(100): warning #970-D: the qualifier on this friend declaration is ignored

/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp(54): warning #737-D: using-declaration ignored -- it refers to the current namespace

/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp(55): warning #737-D: using-declaration ignored -- it refers to the current namespace

/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp(54): warning #737-D: using-declaration ignored -- it refers to the current namespace

/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp(55): warning #737-D: using-declaration ignored -- it refers to the current namespace

/opt/ros/humble/include/rclcpp/rclcpp/logger.hpp(106): warning #970-D: the qualifier on this friend declaration is ignored

/opt/ros/humble/include/rclcpp/rclcpp/network_flow_endpoint.hpp(92): warning #970-D: the qualifier on this friend declaration is ignored

/opt/ros/humble/include/rclcpp/rclcpp/network_flow_endpoint.hpp(95): warning #970-D: the qualifier on this friend declaration is ignored

/opt/ros/humble/include/rclcpp/rclcpp/network_flow_endpoint.hpp(100): warning #970-D: the qualifier on this friend declaration is ignored

/opt/ros/humble/include/rclcpp/rclcpp/logger.hpp(106): warning #970-D: the qualifier on this friend declaration is ignored

/opt/ros/humble/include/rclcpp/rclcpp/network_flow_endpoint.hpp(92): warning #970-D: the qualifier on this friend declaration is ignored

/opt/ros/humble/include/rclcpp/rclcpp/network_flow_endpoint.hpp(95): warning #970-D: the qualifier on this friend declaration is ignored

/opt/ros/humble/include/rclcpp/rclcpp/network_flow_endpoint.hpp(100): warning #970-D: the qualifier on this friend declaration is ignored

/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp(54): warning #737-D: using-declaration ignored -- it refers to the current namespace

/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp(55): warning #737-D: using-declaration ignored -- it refers to the current namespace

/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp(54): warning #737-D: using-declaration ignored -- it refers to the current namespace

/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp(55): warning #737-D: using-declaration ignored -- it refers to the current namespace

/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of â€˜rclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (SourceDriver::*(SourceDriver*, std::_Placeholder<1>))(std::shared_ptr<hesai_ros_driver::msg::UdpFrame_<std::allocator<void> > >)>; MessageT = hesai_ros_driver::msg::UdpFrame_<std::allocator<void> >; AllocatorT = std::allocator<void>]â€™:
/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:30:   required from â€˜rclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = hesai_ros_driver::msg::UdpFrame_<std::allocator<void> >; CallbackT = std::_Bind<void (SourceDriver::*(SourceDriver*, std::_Placeholder<1>))(std::shared_ptr<hesai_ros_driver::msg::UdpFrame_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<hesai_ros_driver::msg::UdpFrame_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<hesai_ros_driver::msg::UdpFrame_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = hesai_ros_driver::msg::UdpFrame_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<hesai_ros_driver::msg::UdpFrame_<std::allocator<void> >, std::allocator<void> > >]â€™
/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:   required from â€˜std::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = hesai_ros_driver::msg::UdpFrame_<std::allocator<void> >; CallbackT = std::_Bind<void (SourceDriver::*(SourceDriver*, std::_Placeholder<1>))(std::shared_ptr<hesai_ros_driver::msg::UdpFrame_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<hesai_ros_driver::msg::UdpFrame_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<hesai_ros_driver::msg::UdpFrame_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = hesai_ros_driver::msg::UdpFrame_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<hesai_ros_driver::msg::UdpFrame_<std::allocator<void> >, std::allocator<void> > >]â€™
/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:190:109:   required from â€˜std::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = hesai_ros_driver::msg::UdpFrame_<std::allocator<void> >; CallbackT = std::_Bind<void (SourceDriver::*(SourceDriver*, std::_Placeholder<1>))(std::shared_ptr<hesai_ros_driver::msg::UdpFrame_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<hesai_ros_driver::msg::UdpFrame_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<hesai_ros_driver::msg::UdpFrame_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<hesai_ros_driver::msg::UdpFrame_<std::allocator<void> >, std::allocator<void> > >]â€™
/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:   required from â€˜std::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = hesai_ros_driver::msg::UdpFrame_<std::allocator<void> >; CallbackT = std::_Bind<void (SourceDriver::*(SourceDriver*, std::_Placeholder<1>))(std::shared_ptr<hesai_ros_driver::msg::UdpFrame_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<hesai_ros_driver::msg::UdpFrame_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<hesai_ros_driver::msg::UdpFrame_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<hesai_ros_driver::msg::UdpFrame_<std::allocator<void> >, std::allocator<void> > >]â€™
/home/suke/chicken_core/src/sensor/HesaiLidar_ROS_2.0/src/manager/source_driver_ros2.hpp:151:110:   required from here
/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:391:15: warning: â€˜void rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set_deprecated(std::function<void(std::shared_ptr<_Yp>)>) [with SetT = hesai_ros_driver::msg::UdpFrame_<std::allocator<void> >; MessageT = hesai_ros_driver::msg::UdpFrame_<std::allocator<void> >; AllocatorT = std::allocator<void>]â€™ is deprecated: use 'void(std::shared_ptr<const MessageT>)' instead [-Wdeprecated-declarations]
  391 |       set_deprecated(static_cast<typename scbth::callback_type>(callback));
      |       ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~                                                  
/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:408:1: note: declared here
  408 |   set_deprecated(std::function<void(std::shared_ptr<SetT>)> callback)
      | ^ ~~~~~~~~~~~~
/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of â€˜rclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (SourceDriver::*(SourceDriver*, std::_Placeholder<1>))(std::shared_ptr<std_msgs::msg::UInt8MultiArray_<std::allocator<void> > >)>; MessageT = std_msgs::msg::UInt8MultiArray_<std::allocator<void> >; AllocatorT = std::allocator<void>]â€™:
/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:30:   required from â€˜rclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = std_msgs::msg::UInt8MultiArray_<std::allocator<void> >; CallbackT = std::_Bind<void (SourceDriver::*(SourceDriver*, std::_Placeholder<1>))(std::shared_ptr<std_msgs::msg::UInt8MultiArray_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std_msgs::msg::UInt8MultiArray_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::UInt8MultiArray_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = std_msgs::msg::UInt8MultiArray_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::UInt8MultiArray_<std::allocator<void> >, std::allocator<void> > >]â€™
/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:   required from â€˜std::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std_msgs::msg::UInt8MultiArray_<std::allocator<void> >; CallbackT = std::_Bind<void (SourceDriver::*(SourceDriver*, std::_Placeholder<1>))(std::shared_ptr<std_msgs::msg::UInt8MultiArray_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std_msgs::msg::UInt8MultiArray_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::UInt8MultiArray_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = std_msgs::msg::UInt8MultiArray_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::UInt8MultiArray_<std::allocator<void> >, std::allocator<void> > >]â€™
/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:190:109:   required from â€˜std::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std_msgs::msg::UInt8MultiArray_<std::allocator<void> >; CallbackT = std::_Bind<void (SourceDriver::*(SourceDriver*, std::_Placeholder<1>))(std::shared_ptr<std_msgs::msg::UInt8MultiArray_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std_msgs::msg::UInt8MultiArray_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::UInt8MultiArray_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::UInt8MultiArray_<std::allocator<void> >, std::allocator<void> > >]â€™
/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:   required from â€˜std::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std_msgs::msg::UInt8MultiArray_<std::allocator<void> >; CallbackT = std::_Bind<void (SourceDriver::*(SourceDriver*, std::_Placeholder<1>))(std::shared_ptr<std_msgs::msg::UInt8MultiArray_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std_msgs::msg::UInt8MultiArray_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::UInt8MultiArray_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::UInt8MultiArray_<std::allocator<void> >, std::allocator<void> > >]â€™
/home/suke/chicken_core/src/sensor/HesaiLidar_ROS_2.0/src/manager/source_driver_ros2.hpp:154:109:   required from here
/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:391:15: warning: â€˜void rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set_deprecated(std::function<void(std::shared_ptr<_Yp>)>) [with SetT = std_msgs::msg::UInt8MultiArray_<std::allocator<void> >; MessageT = std_msgs::msg::UInt8MultiArray_<std::allocator<void> >; AllocatorT = std::allocator<void>]â€™ is deprecated: use 'void(std::shared_ptr<const MessageT>)' instead [-Wdeprecated-declarations]
  391 |       set_deprecated(static_cast<typename scbth::callback_type>(callback));
      |       ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~                                                  
/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:408:1: note: declared here
  408 |   set_deprecated(std::function<void(std::shared_ptr<SetT>)> callback)
      | ^ ~~~~~~~~~~~~
/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of â€˜rclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (SourceDriver::*(SourceDriver*, std::_Placeholder<1>))(std::shared_ptr<hesai_ros_driver::msg::UdpFrame_<std::allocator<void> > >)>; MessageT = hesai_ros_driver::msg::UdpFrame_<std::allocator<void> >; AllocatorT = std::allocator<void>]â€™:
/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:30:   required from â€˜rclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = hesai_ros_driver::msg::UdpFrame_<std::allocator<void> >; CallbackT = std::_Bind<void (SourceDriver::*(SourceDriver*, std::_Placeholder<1>))(std::shared_ptr<hesai_ros_driver::msg::UdpFrame_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<hesai_ros_driver::msg::UdpFrame_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<hesai_ros_driver::msg::UdpFrame_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = hesai_ros_driver::msg::UdpFrame_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<hesai_ros_driver::msg::UdpFrame_<std::allocator<void> >, std::allocator<void> > >]â€™
/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:   required from â€˜std::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = hesai_ros_driver::msg::UdpFrame_<std::allocator<void> >; CallbackT = std::_Bind<void (SourceDriver::*(SourceDriver*, std::_Placeholder<1>))(std::shared_ptr<hesai_ros_driver::msg::UdpFrame_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<hesai_ros_driver::msg::UdpFrame_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<hesai_ros_driver::msg::UdpFrame_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = hesai_ros_driver::msg::UdpFrame_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<hesai_ros_driver::msg::UdpFrame_<std::allocator<void> >, std::allocator<void> > >]â€™
/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:190:109:   required from â€˜std::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = hesai_ros_driver::msg::UdpFrame_<std::allocator<void> >; CallbackT = std::_Bind<void (SourceDriver::*(SourceDriver*, std::_Placeholder<1>))(std::shared_ptr<hesai_ros_driver::msg::UdpFrame_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<hesai_ros_driver::msg::UdpFrame_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<hesai_ros_driver::msg::UdpFrame_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<hesai_ros_driver::msg::UdpFrame_<std::allocator<void> >, std::allocator<void> > >]â€™
/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:   required from â€˜std::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = hesai_ros_driver::msg::UdpFrame_<std::allocator<void> >; CallbackT = std::_Bind<void (SourceDriver::*(SourceDriver*, std::_Placeholder<1>))(std::shared_ptr<hesai_ros_driver::msg::UdpFrame_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<hesai_ros_driver::msg::UdpFrame_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<hesai_ros_driver::msg::UdpFrame_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<hesai_ros_driver::msg::UdpFrame_<std::allocator<void> >, std::allocator<void> > >]â€™
/home/suke/chicken_core/src/sensor/HesaiLidar_ROS_2.0/src/manager/source_driver_ros2.hpp:151:110:   required from here
/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:391:15: warning: â€˜void rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set_deprecated(std::function<void(std::shared_ptr<_Yp>)>) [with SetT = hesai_ros_driver::msg::UdpFrame_<std::allocator<void> >; MessageT = hesai_ros_driver::msg::UdpFrame_<std::allocator<void> >; AllocatorT = std::allocator<void>]â€™ is deprecated: use 'void(std::shared_ptr<const MessageT>)' instead [-Wdeprecated-declarations]
  391 |       set_deprecated(static_cast<typename scbth::callback_type>(callback));
      |       ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~                                                  
/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:408:1: note: declared here
  408 |   set_deprecated(std::function<void(std::shared_ptr<SetT>)> callback)
      | ^ ~~~~~~~~~~~~
/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of â€˜rclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (SourceDriver::*(SourceDriver*, std::_Placeholder<1>))(std::shared_ptr<std_msgs::msg::UInt8MultiArray_<std::allocator<void> > >)>; MessageT = std_msgs::msg::UInt8MultiArray_<std::allocator<void> >; AllocatorT = std::allocator<void>]â€™:
/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:30:   required from â€˜rclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = std_msgs::msg::UInt8MultiArray_<std::allocator<void> >; CallbackT = std::_Bind<void (SourceDriver::*(SourceDriver*, std::_Placeholder<1>))(std::shared_ptr<std_msgs::msg::UInt8MultiArray_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std_msgs::msg::UInt8MultiArray_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::UInt8MultiArray_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = std_msgs::msg::UInt8MultiArray_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::UInt8MultiArray_<std::allocator<void> >, std::allocator<void> > >]â€™
/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:   required from â€˜std::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std_msgs::msg::UInt8MultiArray_<std::allocator<void> >; CallbackT = std::_Bind<void (SourceDriver::*(SourceDriver*, std::_Placeholder<1>))(std::shared_ptr<std_msgs::msg::UInt8MultiArray_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std_msgs::msg::UInt8MultiArray_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::UInt8MultiArray_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = std_msgs::msg::UInt8MultiArray_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::UInt8MultiArray_<std::allocator<void> >, std::allocator<void> > >]â€™
/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:190:109:   required from â€˜std::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std_msgs::msg::UInt8MultiArray_<std::allocator<void> >; CallbackT = std::_Bind<void (SourceDriver::*(SourceDriver*, std::_Placeholder<1>))(std::shared_ptr<std_msgs::msg::UInt8MultiArray_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std_msgs::msg::UInt8MultiArray_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::UInt8MultiArray_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::UInt8MultiArray_<std::allocator<void> >, std::allocator<void> > >]â€™
/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:   required from â€˜std::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std_msgs::msg::UInt8MultiArray_<std::allocator<void> >; CallbackT = std::_Bind<void (SourceDriver::*(SourceDriver*, std::_Placeholder<1>))(std::shared_ptr<std_msgs::msg::UInt8MultiArray_<std::allocator<void> > >)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std_msgs::msg::UInt8MultiArray_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::UInt8MultiArray_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std_msgs::msg::UInt8MultiArray_<std::allocator<void> >, std::allocator<void> > >]â€™
/home/suke/chicken_core/src/sensor/HesaiLidar_ROS_2.0/src/manager/source_driver_ros2.hpp:154:109:   required from here
/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:391:15: warning: â€˜void rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set_deprecated(std::function<void(std::shared_ptr<_Yp>)>) [with SetT = std_msgs::msg::UInt8MultiArray_<std::allocator<void> >; MessageT = std_msgs::msg::UInt8MultiArray_<std::allocator<void> >; AllocatorT = std::allocator<void>]â€™ is deprecated: use 'void(std::shared_ptr<const MessageT>)' instead [-Wdeprecated-declarations]
  391 |       set_deprecated(static_cast<typename scbth::callback_type>(callback));
      |       ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~                                                  
/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:408:1: note: declared here
  408 |   set_deprecated(std::function<void(std::shared_ptr<SetT>)> callback)
      | ^ ~~~~~~~~~~~~
